#!/usr/bin/env python3

######################################################
## OliVR: Oligonucleotide Verification for Research ##
######################################################

from Bio import SeqIO
from multiprocessing import cpu_count
from io import StringIO
import itertools
import subprocess
import sys
import os
import argparse

def arguments():

    parser = argparse.ArgumentParser()

    parser.add_argument('primers',
                        help = 'FASTA file with degenerate primers')
    
    return parser.parse_args()

# Goal: expand degenerate primers with the DSCP Perl script

def dscp_expand(primers_fasta):
    
    dscp = 'dscp.pl'
    
    child = subprocess.Popen(dscp, stdin=subprocess.PIPE, universal_newlines=True)
    
    return child.communicate(primers_fasta)

# Goal: generate table with all possible pairwise combinations of primers
# This table is the input for the standalone e-PCR software
# The idea is to use the text file in FASTA format generated by DSCP in the previous function

def primer_combinations(expanded_fasta):
    
    primer_id = []
    primer_seq = []

    for expanded in SeqIO.parse(expanded_fasta, 'fasta'):
        primer_id.append(str(expanded.id))
        primer_seq.append(str(expanded.id))

    primers = [primer_id, primer_seq]

    primer_table = {}

    for i in range(len(primer_id)):
        primer_table[primer_id[i]] = primer_seq[i]
        
        # primers = [primer_id, primer_seq]
        # primer_table = {x[0]: x for x in primers}

def main():

    args = arguments()

    expanded_degeneracies = dscp_expand(args.primers)

    pairwise_primers = primer_combinations(expanded_degeneracies)

if __name__ == '__main__':
    main()
